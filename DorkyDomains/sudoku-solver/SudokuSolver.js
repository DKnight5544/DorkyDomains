function transform(text) {
    // this will be an attempt at solving sudoku using a functional approach.


    const siblingMap = JSON.parse("[[2,3,4,5,6,7,8,9,10,19,28,37,46,55,64,73,11,12,20,21],[1,3,4,5,6,7,8,9,11,20,29,38,47,56,65,74,10,12,19,21],[1,2,4,5,6,7,8,9,12,21,30,39,48,57,66,75,10,11,19,20],[1,2,3,5,6,7,8,9,13,22,31,40,49,58,67,76,14,15,23,24],[1,2,3,4,6,7,8,9,14,23,32,41,50,59,68,77,13,15,22,24],[1,2,3,4,5,7,8,9,15,24,33,42,51,60,69,78,13,14,22,23],[1,2,3,4,5,6,8,9,16,25,34,43,52,61,70,79,17,18,26,27],[1,2,3,4,5,6,7,9,17,26,35,44,53,62,71,80,16,18,25,27],[1,2,3,4,5,6,7,8,18,27,36,45,54,63,72,81,16,17,25,26],[11,12,13,14,15,16,17,18,1,19,28,37,46,55,64,73,2,3,20,21],[10,12,13,14,15,16,17,18,2,20,29,38,47,56,65,74,1,3,19,21],[10,11,13,14,15,16,17,18,3,21,30,39,48,57,66,75,1,2,19,20],[10,11,12,14,15,16,17,18,4,22,31,40,49,58,67,76,5,6,23,24],[10,11,12,13,15,16,17,18,5,23,32,41,50,59,68,77,4,6,22,24],[10,11,12,13,14,16,17,18,6,24,33,42,51,60,69,78,4,5,22,23],[10,11,12,13,14,15,17,18,7,25,34,43,52,61,70,79,8,9,26,27],[10,11,12,13,14,15,16,18,8,26,35,44,53,62,71,80,7,9,25,27],[10,11,12,13,14,15,16,17,9,27,36,45,54,63,72,81,7,8,25,26],[20,21,22,23,24,25,26,27,1,10,28,37,46,55,64,73,2,3,11,12],[19,21,22,23,24,25,26,27,2,11,29,38,47,56,65,74,1,3,10,12],[19,20,22,23,24,25,26,27,3,12,30,39,48,57,66,75,1,2,10,11],[19,20,21,23,24,25,26,27,4,13,31,40,49,58,67,76,5,6,14,15],[19,20,21,22,24,25,26,27,5,14,32,41,50,59,68,77,4,6,13,15],[19,20,21,22,23,25,26,27,6,15,33,42,51,60,69,78,4,5,13,14],[19,20,21,22,23,24,26,27,7,16,34,43,52,61,70,79,8,9,17,18],[19,20,21,22,23,24,25,27,8,17,35,44,53,62,71,80,7,9,16,18],[19,20,21,22,23,24,25,26,9,18,36,45,54,63,72,81,7,8,16,17],[29,30,31,32,33,34,35,36,1,10,19,37,46,55,64,73,38,39,47,48],[28,30,31,32,33,34,35,36,2,11,20,38,47,56,65,74,37,39,46,48],[28,29,31,32,33,34,35,36,3,12,21,39,48,57,66,75,37,38,46,47],[28,29,30,32,33,34,35,36,4,13,22,40,49,58,67,76,41,42,50,51],[28,29,30,31,33,34,35,36,5,14,23,41,50,59,68,77,40,42,49,51],[28,29,30,31,32,34,35,36,6,15,24,42,51,60,69,78,40,41,49,50],[28,29,30,31,32,33,35,36,7,16,25,43,52,61,70,79,44,45,53,54],[28,29,30,31,32,33,34,36,8,17,26,44,53,62,71,80,43,45,52,54],[28,29,30,31,32,33,34,35,9,18,27,45,54,63,72,81,43,44,52,53],[38,39,40,41,42,43,44,45,1,10,19,28,46,55,64,73,29,30,47,48],[37,39,40,41,42,43,44,45,2,11,20,29,47,56,65,74,28,30,46,48],[37,38,40,41,42,43,44,45,3,12,21,30,48,57,66,75,28,29,46,47],[37,38,39,41,42,43,44,45,4,13,22,31,49,58,67,76,32,33,50,51],[37,38,39,40,42,43,44,45,5,14,23,32,50,59,68,77,31,33,49,51],[37,38,39,40,41,43,44,45,6,15,24,33,51,60,69,78,31,32,49,50],[37,38,39,40,41,42,44,45,7,16,25,34,52,61,70,79,35,36,53,54],[37,38,39,40,41,42,43,45,8,17,26,35,53,62,71,80,34,36,52,54],[37,38,39,40,41,42,43,44,9,18,27,36,54,63,72,81,34,35,52,53],[47,48,49,50,51,52,53,54,1,10,19,28,37,55,64,73,29,30,38,39],[46,48,49,50,51,52,53,54,2,11,20,29,38,56,65,74,28,30,37,39],[46,47,49,50,51,52,53,54,3,12,21,30,39,57,66,75,28,29,37,38],[46,47,48,50,51,52,53,54,4,13,22,31,40,58,67,76,32,33,41,42],[46,47,48,49,51,52,53,54,5,14,23,32,41,59,68,77,31,33,40,42],[46,47,48,49,50,52,53,54,6,15,24,33,42,60,69,78,31,32,40,41],[46,47,48,49,50,51,53,54,7,16,25,34,43,61,70,79,35,36,44,45],[46,47,48,49,50,51,52,54,8,17,26,35,44,62,71,80,34,36,43,45],[46,47,48,49,50,51,52,53,9,18,27,36,45,63,72,81,34,35,43,44],[56,57,58,59,60,61,62,63,1,10,19,28,37,46,64,73,65,66,74,75],[55,57,58,59,60,61,62,63,2,11,20,29,38,47,65,74,64,66,73,75],[55,56,58,59,60,61,62,63,3,12,21,30,39,48,66,75,64,65,73,74],[55,56,57,59,60,61,62,63,4,13,22,31,40,49,67,76,68,69,77,78],[55,56,57,58,60,61,62,63,5,14,23,32,41,50,68,77,67,69,76,78],[55,56,57,58,59,61,62,63,6,15,24,33,42,51,69,78,67,68,76,77],[55,56,57,58,59,60,62,63,7,16,25,34,43,52,70,79,71,72,80,81],[55,56,57,58,59,60,61,63,8,17,26,35,44,53,71,80,70,72,79,81],[55,56,57,58,59,60,61,62,9,18,27,36,45,54,72,81,70,71,79,80],[65,66,67,68,69,70,71,72,1,10,19,28,37,46,55,73,56,57,74,75],[64,66,67,68,69,70,71,72,2,11,20,29,38,47,56,74,55,57,73,75],[64,65,67,68,69,70,71,72,3,12,21,30,39,48,57,75,55,56,73,74],[64,65,66,68,69,70,71,72,4,13,22,31,40,49,58,76,59,60,77,78],[64,65,66,67,69,70,71,72,5,14,23,32,41,50,59,77,58,60,76,78],[64,65,66,67,68,70,71,72,6,15,24,33,42,51,60,78,58,59,76,77],[64,65,66,67,68,69,71,72,7,16,25,34,43,52,61,79,62,63,80,81],[64,65,66,67,68,69,70,72,8,17,26,35,44,53,62,80,61,63,79,81],[64,65,66,67,68,69,70,71,9,18,27,36,45,54,63,81,61,62,79,80],[74,75,76,77,78,79,80,81,1,10,19,28,37,46,55,64,56,57,65,66],[73,75,76,77,78,79,80,81,2,11,20,29,38,47,56,65,55,57,64,66],[73,74,76,77,78,79,80,81,3,12,21,30,39,48,57,66,55,56,64,65],[73,74,75,77,78,79,80,81,4,13,22,31,40,49,58,67,59,60,68,69],[73,74,75,76,78,79,80,81,5,14,23,32,41,50,59,68,58,60,67,69],[73,74,75,76,77,79,80,81,6,15,24,33,42,51,60,69,58,59,67,68],[73,74,75,76,77,78,80,81,7,16,25,34,43,52,61,70,62,63,71,72],[73,74,75,76,77,78,79,81,8,17,26,35,44,53,62,71,61,63,70,72],[73,74,75,76,77,78,79,80,9,18,27,36,45,54,63,72,61,62,70,71]]");

    function isValid(testCellIndex, intext, testVal) {

        let sibs = siblingMap[testCellIndex];

        for (let s = 0; s < sibs.length; s++) {
            let idx = sibs[s]-1;
            let sibVal = intext.substr(idx, 1);
            if (sibVal === testVal.toString()) return false;
        }

        return true;

    }

    function solveNext(intext) {

        // we are always going to test the cell with the next zero.
        const testCellIndex = intext.indexOf("0");

        // if there are no zeros then we are done!
        if (testCellIndex == -1) return intext;

        for (let testVal = 1; testVal <= 9; testVal++) {
            let good = isValid(testCellIndex, intext, testVal)
            if (good) {
                // replace => replaces first occrance only by default.
                let newText = intext.replace("0", testVal.toString()); 
                let outText = solveNext(newText);
                if (outText != "") return outText;
            }
        }

        return "";
    }


    let stripped= text.replace(/,/g, "").replace(/(\r\n|\n|\r)/gm, "");

    let solved = solveNext(stripped);

    return solved

}